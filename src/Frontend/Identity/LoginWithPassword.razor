@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <div class="alert alert-success">You're logged in as
            @context.User.Identity?.Name
        </div>
    </Authorized>
    <NotAuthorized>
        <EditForm Model="Input"
                  method="post"
                  OnValidSubmit="LoginUser"
                  FormName="login"
                  Context="editform_context">
            <DataAnnotationsValidator />

            <MudGrid Justify="Justify.Center">

                <MudItem xs="12">
                    <MudText Typo="Typo.h5">Login with Password</MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Email"
                                  HelperText="User Name or Email"
                                  Variant="Variant.Outlined"
                                  For="@(() => Input.Email)" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Password"
                                  HelperText="Password"
                                  InputType="InputType.Password"
                                  Variant="Variant.Outlined"
                                  For="@(() => Input.Password)" />
                </MudItem>

                <MudItem xs="12"
                         Class="mb-5">
                    @if (isLoading)
                    {
                        <MudProgressCircular Indeterminate="true"
                                             Class="mx-auto d-block" />
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Info"
                                   Size="Size.Large"
                                   Class="mud-width-full">
                            Login
                        </MudButton>

                        <MudDivider Class="my-4" />

                        @* <MudButton OnClick="LoginWithPasskey" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large"
                            Class="mud-width-full">
                            <MudIcon Icon="@Icons.Material.Filled.Fingerprint" Class="mr-2" /> Login with Passkey
                        </MudButton> *@
                    }
                </MudItem>

                <div class="text-center">
                    <p>New to this platform? <a href="/createnewaccount"
                           class="text-decoration-none">Create an Account</a>
                    </p>
                    <p><a href="/requestpasswordreset"
                           class="text-decoration-none">Forgot password?</a></p>
                    <p><a href="/twofactorauth"
                           class="text-decoration-none">Login with
                            two-factor</a></p>
                </div>

            </MudGrid>
        </EditForm>
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool isLoading = false;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [Inject]
    public required IAccountManagement AccountManagement { get; set; }

    public async Task LoginUser()
    {
        isLoading = true;

        try
        {
            var loginRequest = new LoginRequest(Input.Email, Input.Password);
            var loginResult = await AccountManagement.LoginAsync(loginRequest);

            if (loginResult.Succeeded)
            {
                Snackbar.Add("Login successful!", Severity.Success);

                var returnUrl = string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ReturnUrl;
                NavigationManager.NavigateTo(returnUrl);

                return;
            }

            foreach (var error in loginResult.Errors)
            {
                Snackbar.Add(error, Severity.Error);
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }
}