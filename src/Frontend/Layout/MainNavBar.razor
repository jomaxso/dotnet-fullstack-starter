@using Frontend.Identity
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation
@inject IAccountManagement Account

<MudLink
    Href="home"
    Match="NavLinkMatch.All"
    Color="Color.Inherit"
>
    <MudText
        Typo="Typo.h6"
        Class="ml-2"
    >DotnetFullstackStarter
    </MudText>
</MudLink>

<MudSpacer />

<div class="d-flex align-center mud-width-300">
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudAutocomplete
            Label="US States"
            @bind-Value="choice.State"
            Required="true"
            SearchFunc="@SearchAsync"
            Immediate="true"
            CoerceValue="@coerceValue"
            ResetValueOnEmptyText="true"
            AdornmentIcon="@Icons.Material.Filled.Search"
            AdornmentColor="Color.Primary"
            For="@(() => choice.State)"
        />
    </MudHidden>
</div>

<MudSpacer />

<MudToggleIconButton
    Icon="@Icons.Material.Filled.DarkMode"
    Color="@Color.Surface"
    ToggledIcon="@Icons.Material.Filled.LightMode"
    ToggledColor="@Color.Success"
    title="@(IsDarkMode ? "Switch to Light Mode" : "Switch to Dark Mode")"
    ToggledChanged="IsDarkModeChanged" />

<MudLink Href="account-settings"
         Match="NavLinkMatch.All"
         Color="Color.Inherit">
    <MudText>@context.User.Identity?.Name</MudText>
</MudLink>

<MudTooltip Text="Logout">
    <MudIconButton OnClick="@Logout"
                   Icon="@Icons.Material.Filled.Logout"
                   Color="Color.Inherit" />
</MudTooltip>

@code
{
    private static string[] states =
    {
"Alabama", "Alaska", "American Samoa", "Arizona",
"Arkansas", "California", "Colorado", "Connecticut",
"Delaware", "District of Columbia", "Federated States of Micronesia",
"Florida", "Georgia", "Guam", "Hawaii", "Idaho",
"Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
"Louisiana", "Maine", "Marshall Islands", "Maryland",
"Massachusetts", "Michigan", "Minnesota", "Mississippi",
"Missouri", "Montana", "Nebraska", "Nevada",
"New Hampshire", "New Jersey", "New Mexico", "New York",
"North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
"Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
"Rhode Island", "South Carolina", "South Dakota", "Tennessee",
"Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
"Washington", "West Virginia", "Wisconsin", "Wyoming",
};

    private bool coerceValue;

    private Choice choice = new();

    [Parameter, EditorRequired] public bool IsDarkMode { get; set; }

    [Parameter] public EventCallback<bool> IsDarkModeChanged { get; set; }

    private async Task<IEnumerable<string>> SearchAsync(string value,
    CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return states;
        }

        return states.Where(x => x.Contains(value,
        StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task Logout()
    {
        await Account.LogoutAsync();
        Navigation.NavigateTo("/");
    }

    public class Choice
    {
        [Required]
        public string State { get; set; }
    }
}
